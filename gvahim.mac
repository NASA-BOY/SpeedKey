
;--------------------------------------------------------------------------------------
;
;                         G V A H I M   M A C R O S  
;
;--------------------------------------------------------------------------------------


;--------------------------------------------------------------------------------------
; PUSH_REGS <regA, rebB, ...>
;    Pushes the registers to the stack 
;--------------------------------------------------------------------------------------
macro PUSH_REGS registers
 irp  reg, <registers>
  push reg
 endm  
endm

;--------------------------------------------------------------------------------------
; POP_REGS <regA, rebB, ...>
;    Pops the registers to the stack 
;--------------------------------------------------------------------------------------
macro POP_REGS registers
 irp  reg, <registers>
  pop reg
 endm 
endm
	 
;--------------------------------------------------------------------------------------
; PUTC character|8 bit reg
;    Prints the character on the screen 
;--------------------------------------------------------------------------------------
macro PUTC char
    PUSH_REGS <ax, dx>
    mov  dl, char
    mov  ah, 02h
    int  21h
    POP_REGS <dx, ax>  
endm   

;--------------------------------------------------------------------------------------
; JBETWEEN reg, low, high, label
;    If 'low'<='reg'<= 'high', jmp to 'label' 
;--------------------------------------------------------------------------------------
macro JBETWEEN reg,low,high,label
    LOCAL NOT_BETWEEN

    cmp reg, low
    jb  NOT_BETWEEN
    cmp reg, high
    ja  NOT_BETWEEN
    jmp label

    NOT_BETWEEN:
endm

;--------------------------------------------------------------------------------------
; JE_F label
;    JE to a label that is further than +/-127 bytes away
;--------------------------------------------------------------------------------------
macro JE_F label
   local SKIP
   jne SKIP
   jmp label
SKIP:       
endm


;--------------------------------------------------------------------------------------
; DEBUG_REG 16_bit_reg
;    Prints 16 bit register 'reg' to the screen 
;--------------------------------------------------------------------------------------
macro DEBUG_REG registers
 irp reg,<registers>
    local reg_name
    local after_data

    jmp  after_data

reg_name db "&reg = ",0

after_data:
    PUSH_REGS <si, ds>

    lea  si, [cs:reg_name]

    ; For .EXE programs DS is pointing to the data segment, and not the code segment 
    push cs 
    pop  ds
    
    call PRINT_STR
    
    POP_REGS <ds, si>

    
    xchg ax, reg
    call PRINT_NUM_DEBUG
    xchg ax, reg
    
 endm
endm 

